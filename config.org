* Auto Complete
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3))

    (use-package company-irony
      :ensure t
      :config
      (require 'company)
      (add-to-list 'company-backends 'company-irony))

    (use-package irony
      :ensure t
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

    (with-eval-after-load 'company
      (add-hook 'c++-mode-hook 'company-mode)
      (add-hook 'c-mode-hook 'company-mode))
  #+END_SRC
* Avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind
      ("M-s" . avy-goto-char)
      ("M-p" . avy-copy-line))
  #+END_SRC
* Buffers
** Enable iBuffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC
** Expert
   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-expert t)
   #+END_SRC
** Kill All Buffers
   #+BEGIN_SRC emacs-lisp
     (defun kill-all-buffers ()
       (interactive)
       (mapc 'kill-buffer (buffer-list)))
     (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
   #+END_SRC
** Kill Current
   #+BEGIN_SRC emacs-lisp
     (defun kill-curr-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'kill-curr-buffer)
   #+END_SRC
* Config Edit/Reload
** Edit
   #+BEGIN_SRC emacs-lisp
     (defun config-visit()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+END_SRC
** Reload
   #+BEGIN_SRC emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
* Cursor Follow win-split
  #+BEGIN_SRC emacs-lisp
    (defun split-and-follow-vertically ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-vertically)

    (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-horizontally)
  #+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+END_SRC
* Environments
** C Mode
   #+BEGIN_SRC emacs-lisp
   (autoload 'c++-mode "cc-mode" "C++ Editing Mode" t)
   (autoload 'c-mode "cc-mode" "C Editing Mode" t)
   (autoload 'c-mode-common-hook "cc-mode" "C Mode Hooks" t)
   (autoload 'c-add-style "cc-mode" "Add coding style" t)
   #+END_SRC
* IDO
** Enable IDO
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC
** Ido-Vertical
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only)
   #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
   #+END_SRC
** Switch Buffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+END_SRC
* Minor Settings
** Backup/Auto-Save
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-file nil)
     (setq auto-save-default nil)
   #+END_SRC 
** Bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Clock
   #+BEGIN_SRC emacs-lisp
     (setq display-time-12hr-format t)
     (display-time-mode 1)
   #+END_SRC
** Disable Splash/Welcome
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (setq initial-scratch-message nil)
   #+END_SRC
** Electric
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
                                 (?\( . ?\))
                                 (?\[ . ?\])
                                 ))

     (electric-pair-mode t)
   #+END_SRC
** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (setq linum-format "%d ")
#+END_SRC
** Mouse yank at point
   #+BEGIN_SRC emacs-lisp
   (setq-default mouse-yank-at-pint t)
   #+END_SRC
** Pretty Symbols
   #+BEGIN_SRC emacs-lisp
   (when window-system (global-prettify-symbols-mode t))
   (when window-system
         (use-package pretty-mode
         :ensure t
         :config
         (add-hook 'prog-mode-hook 'pretty-mode)))
   #+END_SRC
** Remove Bars
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** Show Matching Parens
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   #+END_SRC
** Spaces Instead of Tabs
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
** SubWord
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** Whitespace
*** Activate whitespace-mode key
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c w") 'whitespace-mode)
    #+END_SRC
*** Show Unecessary Whitespace
    #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
    #+END_SRC
*** Tab Appears -> 4 Spaces
    #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    #+END_SRC
*** Show Trailing Whitespace
    #+BEGIN_SRC emacs-lisp
    (setq-default show-trailing-whitespace t)
    #+END_SRC
** 'y' means 'yes'
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
* Modeline
** Show Column #
   #+BEGIN_SRC emacs-lisp
     (column-number-mode 1)
   #+END_SRC
** Spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (setq powerline-default-seperator (quote arrow))
       (spaceline-spacemacs-theme))
   #+END_SRC
** Diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'which-key-mode)
       (diminish 'beacon-mode)
       (diminish 'subword-mode)
       (diminish 'org-indent-mode))
   #+END_SRC
* Multiple Cursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  #+END_SRC
** Expand Region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-q" . er/expand-region))
   #+END_SRC
* Org
** Key Bindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (global-set-key "\C-cc" 'org-capture)
   (global-set-key "\C-cb" 'org-switchb)
   #+END_SRC
** Org Bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Org Hook
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'org-indent-mode)
   #+END_SRC
** Prevent SRC Window
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
   #+END_SRC
** SRC Template
   #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
     (add-to-list 'org-structure-template-alist
                  '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
   #+END_SRC
** \TODO Keywords
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords
      '((sequence "TODO" "PROGRESS" "DONE")))
   #+END_SRC
* Packages
** Beacon
  #+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
  #+END_SRC
** Free-Key
   #+BEGIN_SRC emacs-lisp
     (use-package free-keys
       :ensure t)
   #+END_SRC
** Popup-Kill-Ring
   #+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("M-y" . popup-kill-ring))
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
     :bind ("C-s" . swiper))
   #+END_SRC
** Which-Key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :init
     (which-key-mode))
   #+END_SRC
* Sudo-Edit
  #+BEGIN_SRC emacs-lisp
    (use-package sudo-edit
      :ensure t
      :bind ("M-E" . sudo-edit))
  #+END_SRC
* Switch-Window
  #+BEGIN_SRC emacs-lisp
    (use-package switch-window
      :ensure t
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 3)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
            '("a" "s" "d" "f" "w" "e" "r"))
      :bind
      ([remap other-window] . switch-window))
  #+END_SRC
* Symon
  #+BEGIN_SRC emacs-lisp
    (use-package symon
      :ensure t)
  #+END_SRC
* Terminal
** Default Shell
  #+BEGIN_SRC emacs-lisp
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)
  #+END_SRC
** Terminal-use Highlighting
  #+BEGIN_SRC emacs-lisp
    (when window-system (global-hl-line-mode t))
  #+END_SRC
